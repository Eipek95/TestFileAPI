@model List<string>
@{
	ViewData["Title"] = "ListFile";
	int i = 1;
}

<table class="table">
	<thead>
		<tr>
			<th scope="col">#</th>
			<th>Dosya Yolu</th>
			<th>İşlemler</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<th scope="row">@i</th>
				<td>@item</td>
                <td>
                    <a href="javascript:void(0);" onclick="confirmDownload('@item')">
                        <i class="bi bi-download"></i>
                    </a>
                </td>
                <td>
                    <a href="javascript:void(0);" onclick="confirmDelete('@item')">
                        <i class="bi bi-trash"></i>
                    </a>
                </td>

				@{i++;}
			</tr>
		}

	</tbody>
</table>

@section scripts {
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function confirmDownload(filePath) {
            Swal.fire({
                title: 'Emin misiniz?',
                text: 'Bu dosyayı indirmek istediğinizden emin misiniz?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Evet',
                cancelButtonText: 'Hayır',
            }).then((result) => {
                if (result.isConfirmed) {
                    // API endpoint'e yönlendirilecek dosya yolu
                    downloadFile(filePath);
                }
            });
        }

        function downloadFile(filePath) {
            // API'ye dosya yolu ile istek gönderilecek
            fetch(`/home/DownloadFile?filePath=${encodeURIComponent(filePath)}`)
                .then(response => {
                    if (response.ok) {
                        return response.blob(); // Dosya indirilmek için alınacak
                    }
                    throw new Error('Dosya indirilemedi');
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = filePath.split('/').pop(); // Dosya adını ayarla
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                })
                .catch(error => {
                    Swal.fire('Hata!', 'Dosya indirilemedi.', 'error');
                });
        }
    </script>

    <script>
        function confirmDelete(filePath) {
            Swal.fire({
                title: 'Silmek istediğinize emin misiniz?',
                text: 'Bu dosya kalıcı olarak silinecek!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Evet, sil',
                cancelButtonText: 'Hayır, iptal',
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteFile(filePath);
                }
            });
        }

        function deleteFile(filePath) {
            fetch(`/home/DeleteFile?filePath=${encodeURIComponent(filePath)}`, {
                method: 'GET'
            })
            .then(response => {
                if (response.ok) {
                    Swal.fire('Başarılı!', 'Dosya silindi.', 'success').then(() => {
                        location.reload(); // Sayfayı yenileyerek listeyi güncelle
                    });
                } else {
                    throw new Error('Silme başarısız.');
                }
            })
            .catch(error => {
                Swal.fire('Hata!', 'Dosya silinemedi.', 'error');
            });
        }
    </script>

}